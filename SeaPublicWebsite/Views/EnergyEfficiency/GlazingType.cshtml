@using GovUkDesignSystem
@using GovUkDesignSystem.GovUkDesignSystemComponents
@using GovUkDesignSystem.GovUkDesignSystemComponents.SubComponents
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SeaPublicWebsite.BusinessLogic.Models.Enums
@using SeaPublicWebsite.Controllers

@model SeaPublicWebsite.Models.EnergyEfficiency.GlazingTypeViewModel;
@{
    ViewBag.Title = "Glazing Type";
}

@section BeforeMain {
    @await Html.GovUkBackLink(new BackLinkViewModel
    {
        Text = "Back",
        Href = Model.BackLink,
    })
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        
        <form action="@Url.Action(nameof(EnergyEfficiencyController.GlazingType_Post), "EnergyEfficiency", new {reference = Model.Reference})" method="post" novalidate>
            @(Html.HiddenFor(m => m.EntryPoint))
            @Html.AntiForgeryToken()
            
            @{
                Func<object, object> details = 
                    @<text>
                        <p class="govuk-body">
                            A single glazed window has a single pane of glass.
                        </p>
                        <p class="govuk-body">
                            A double glazed window has two panes of glass, separated by air or gas, to make up a single window. A triple glazed window has three panes of glass.
                        </p>
                        <p class="govuk-body">
                            Secondary glazing is when an additional independent window is fitted inside, behind the main window. This is commonly used in conservation areas to improve the energy efficiency of the window without replacing it.
                        </p>
                     </text>;
                
                Func<object, object> blueBannerHint = null;
                if (Model.Epc?.GlazingType is not null)
                {
                    blueBannerHint = 
                        @<p class="govuk-body">
                            Your @Model.Epc.LodgementYear Energy Performance Certificate suggests 
                            <strong>
                                @(Model.Epc?.GlazingType switch {
                                    GlazingType.SingleGlazed => "all your windows are single glazed.",
                                    GlazingType.Both => "at least one of your windows is single glazed.",
                                    GlazingType.DoubleOrTripleGlazed => "all your windows are double, triple or secondary glazed.",
                                    _ => throw new ArgumentOutOfRangeException()})
                            </strong>
                        </p>;
                } else if (Model.HintSingleGlazing is not null)
                {
                    blueBannerHint =
                        @<p class="govuk-body">
                            Windows in homes of your type
                            <strong>
                                @(Model.HintSingleGlazing is true
                                    ? "were typically originally built with single glazing, but they may have been replaced." 
                                    : "typically all have double, triple or secondary glazing.")
                            </strong>
                        </p>;
                }
            }
            
            @(await Html.GovUkRadiosFor(m => m.GlazingType,
                fieldsetOptions: new FieldsetViewModel
                {
                    Legend = new LegendViewModel
                    {
                        Text = "Are any of your windows single glazed?",
                        Classes = "govuk-fieldset__legend--l",
                        IsPageHeading = true
                    }
                },
                hintOptions: new HintViewModel
                {
                    Html = @<text>
                               @await Html.GovUkDetails(new DetailsViewModel
                               {
                                   SummaryText = "Help me answer this question",
                                   Html = details
                               })
                               
                               @if (blueBannerHint is not null)
                               {
                                   @await Html.GovUkInsetText(new InsetTextViewModel
                                   {
                                       Classes = "sea-epc-hint",
                                       Html = blueBannerHint
                                   })
                               }
                            </text>
                }
            ))

            @await Html.GovUkButton(new ButtonViewModel
            {
                Text = "Continue"
            })
            
        </form>
        
    </div>
</div>
