filter {
  if [beat][version] {
    mutate {
      rename => { "[beat][name]" => "[host][hostname]" }
      rename => { "[beat][timezone]" => "[event][timezone]"}
      rename => { "[meta][cloud][availability_zone]" => "[cloud][availability_zone]" }
      rename => { "[meta][cloud][instance][id]" => "[cloud][instance_id]" }
      rename => { "[meta][cloud][instance][name]" => "[cloud][instance_name]" }
      rename => { "[meta][cloud][machine][type]" => "[cloud][machine_type]" }
      rename => { "[meta][cloud][project][id]" => "[cloud][project_id]" }
      rename => { "[meta][cloud][provider]" => "[cloud][provider]" }
      rename => { "[meta][cloud][region]" => "[cloud][region]" }
      rename => { "[docker][container][id]" => "[container][id]" }
      rename => { "[docker][container][image][name]" => "[container][image]" }
      rename => { "[docker][container][name]" => "[container][name]" }
      rename => { "[beat][hostname]" => "[agent][hostname]" }
      rename => { "[beat][version]" => "[agent][version]" }
      rename => { "[fileset][module]" => "[event][module]" }
      rename => { "[metricset][module]" => "[event][module]" } 
    }
    if "source" {
      mutate {
        rename => { "source" => "[log][file][path]" } } }
    }
    else if [event][module] == "auditd" {
      grok {
        match => { 
          "message" => [ "%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]} old auid=%{NUMBER:[auditd][log][old_auid]} new auid=%{NUMBER:[auditd][log][new_auid]} old ses=%{NUMBER:[auditd][log][old_ses]} new ses=%{NUMBER:[auditd][log][new_ses]}", "%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]} msg=['\"](%{DATA:[message]}\s+)?%{AUDIT_KEY_VALUES:[auditd][log][sub_kv]}['\"]", "%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]}", "%{AUDIT_PREFIX}", "%{AUDIT_TYPE} %{AUDIT_KEY_VALUES:[auditd][log][kv]}" ]
        }
        pattern_definitions => {
          "AUDIT_TYPE" => "^type=%{NOTSPACE:[event][action]}"
          "AUDIT_PREFIX" => "%{AUDIT_TYPE} msg=audit\(%{NUMBER:[auditd][log][epoch]}:%{NUMBER:[auditd][log][sequence]}\):(%{DATA})?"
          "AUDIT_KEY_VALUES" => "%{WORD}=%{GREEDYDATA}"
        }
      }
      date {
        match => [ "[auditd][log][epoch]", "UNIX" ]
        target => "@timestamp"
      }
      mutate {
        convert => { "[auditd][log][sequence]" => "integer" }
      }
      geoip {
        source => "[auditd][log][addr]"
        target => "[auditd][log][geoip]"
      }
    }
  if /apache-access/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "apache-access" }
    }
  }
  else if /apache-error/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "apache-error" }
    }    
  }
  else if /haproxy-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "haproxy-log" }
    }    
  }
  else if /nginx-access/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "nginx-access" }
    }    
  }
  else if /nginx-error/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "nginx-error" }
    }    
  }
  else if /system-auth/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "system-auth" }
    }    
  }
  else if /system-syslog/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "system-syslog" }
    }    
  }
  else if /logstash-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "logstash-log" }
    }
  }
  else if /logstash-slowlog/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "logstash-slowlog" }
    }
  }
  else if /iis-access/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "iis-access" }
    }
  }
  else if /iis-error/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "iis-error" }
    }
  }
  else if /redis-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "redis-log" }
    }
  }
  else if /redis-slowlog/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "redis-slowlog" }
    }
  }
  else if /elasticsearch-audit/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "elasticsearch-audit" }
    }
  }
  else if /elasticsearch-deprecation/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "elasticsearch-deprecation" }
    }
  }
  else if /elasticsearch-server/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "elasticsearch-server" }
    }
  }
  else if /elasticsearch-slowlog/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "elasticsearch-slowlog" }
    }
  }
  else if /elasticsearch-gc/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "elasticsearch-gc" }
    }
  }
  else if /mysql-error/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "mysql-error" }
    }    
  }
  else if /mysql-slowlog/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "mysql-slowlog" }
    }    
  }
  else if /kibana-audit/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "kibana-audit" }
    }
  }
  else if /kibana-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "kibana-log" }
    }
  }
  else if /postgresql-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "postgresql-log" }
    }
  }
  else if /kafka-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "kafka-log" }
    }
  }
  else if /mongodb-log/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "mongodb-log" }
    }
  }
  else if /traefik-access/ in [@metadata][pipeline] {
    mutate {
      add_field => { "[@metadata][logit_pipeline]" => "traefik-access" }
    }
  }
    else if [logtype] {
      mutate {
        add_field => { "type" => "%{logtype}" }
      }
    } else if [type] == "general" or [type] == "logspout" or [type] == "json" {
      json {
        source => "message"
      }
    } else if [message] =~ /^{.*}/  {
      json {
        source => "message"
      }
    } else if [message] =~ "loggregator" {
  	grok {
  	  match => { "message" => "(?:%{INT} )?<%{POSINT:syslog_pri}>(?:%{NONNEGINT:syslog5424_ver} )?(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{DATA:syslog_program} %{DATA:syslog_hostname} \[%{DATA:syslog_sd_params}\] - %{GREEDYDATA:syslog_message}" }
  	  add_tag => [ "syslog" ]
  	  tag_on_failure => ["fail/syslog/_grokparsefailure"]
  	}
  	if !("fail/syslog_standard/_grokparsefailure" in [tags]) {
  	    syslog_pri { }
  	    date {
  	        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
  	        timezone => "UTC"
  	        remove_field => "syslog_timestamp"
  	    }
  	    #Bundle all the syslog data into a syslog object
  	    mutate {
  	        rename => { "syslog_pri" => "[syslog][pri]" }
  	        rename => { "syslog5424_ver" => "[syslog][5424_ver]" }
  	        rename => { "syslog_sd_params" => "[syslog][sd_params]" }
  	        rename => { "syslog_program" => "[syslog][program]" }
  	        rename => { "syslog_hostname" => "[syslog][hostname]" }
  	        rename => { "syslog_message" => "[syslog][message]" }
  	        rename => { "syslog_severity_code" => "[syslog][severity_code]" }
  	        rename => { "syslog_facility_code" => "[syslog][facility_code]" }
  	        rename => { "syslog_facility" => "[syslog][facility]" }
  	        rename => { "syslog_severity" => "[syslog][severity]" }
  	    }
  	}
  	if [syslog][message] =~ ".*---.*" {
  	    grok {
  	        match => {
  	            '[syslog][message]' => '%{TIMESTAMP_ISO8601:[spring][logtime]}%{SPACE}%{LOGLEVEL:[spring][loglevel]}%{SPACE}%{NUMBER:[spring][pid]}%{SPACE}---%{SPACE}\[%{SPACE}%{DATA:[spring][threadname]}\]%{SPACE}%{NOTSPACE:[spring][classname]}%{SPACE}:%{SPACE}%{GREEDYDATA:[spring][logmessage]}'
  	        }
  	        tag_on_failure => [ 'fail/spring' ]
  	        add_tag => [ 'spring' ]
  	    }
  	    if "spring" in [tags] {
  	        date {
  	            match => [ "[spring][logtime]", "ISO8601" ]
  	            timezone => "UTC"
  	        }
  	        if [spring][logmessage] =~ /^\{/ {
  	            json {
  	                source => "[spring][logmessage]"
  	                target => "[spring][logdata]"
  	                add_tag => "spring/json/auto_detect"
  	            }
  	        }
  	        #Drop duplicated data
  	        mutate {
  	           remove_field => [ "[syslog][message]", "[spring][logmessage]" ]
  	        }
  	    }
  	}
    } else if [type] == "syslog" {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
      }
      syslog_pri { }
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    } else if [type] == "heroku" or [type] == "appharbor" {
      split {}
      grok {
       match => {
          "message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp}|-) +(?:%{HOSTNAME:logplex_host}|-) +(?:%{WORD:logplex_source}|-) +(?:%{DATA:logplex_dyno}|-) +(-) +%{GREEDYDATA:logplex_message}"
        }
      }
      kv {
        source => "logplex_message"
        prefix => "msg_"
        include_keys => [ "at", "method", "path", "host", "request_id", "fwd", "dyno", "connect", "service", "status", "bytes", "source", "id", "wait", "timeout", "state" ]
      }
      syslog_pri { syslog_pri_field_name => "syslog5424_pri" }
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
      mutate {
        remove_field => [ "timestamp", "message" ]
      }
    } else if [type] == "log4net" {
      date {
        match => [ "d", "ISO8601" ]
        target => "@timestamp"
      }
      mutate {
        remove_field => [ "d" ]
      }
      grok {
        match => { "message" => "%{USERNAME:hostname} %{GREEDYDATA:log4net_message}" }
      }
      mutate {
        replace => [ "message", "%{log4net_message}" ]
        remove_field => [ "log4net_message" ]
      }
    } else if [type] == "javascript" {
      date {
        match => [ "[javascript][timestamp]", "ISO8601" ]
        target => "@timestamp"
      }
      mutate {
        remove_field => [ "[javascript][timestamp]" ]
      }
    } else if [type] == "node" {
      date {
        match => [ "[node][timestamp]", "ISO8601" ]
        target => "@timestamp"
      }
      mutate {
        remove_field => [ "[node][timestamp]" ]
      }
    }
  useragent {
    source => "[user_agent][original]"
    target => "ua_tmp"
    add_field => {
      "[user_agent][device][name]" => "%{[ua_tmp][device]}"
      "[user_agent][os][name]" => "%{[ua_tmp][os_name]}"
    }
  }
  # OS version ECS compatibility
  if [ua_tmp][os_major] {
    mutate {
      add_field => {
        "[user_agent][os][version]" => "%{[ua_tmp][os_major]}"
      }
    }
    if [ua_tmp][os_minor] {
      mutate {
        replace => {
          "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_minor]}"
        }
      }
      if [ua_tmp][os_patch] {
        mutate {
          replace => {
            "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_patch]}"
          }
        }
        if [ua_tmp][os_build] {
          mutate {
            replace => {
              "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_build]}"
            }
          }
        }
      }
    }
    mutate {
      add_field => {
        "[user_agent][os][full]" => "%{[user_agent][os][name]} %{[user_agent][os][version]}"
      }
    }
  }
  # User agent version ECS compatibility
  # Aims to create the following if fields exist: user_agent.version.major.minor.patch.build
  if [ua_tmp][major] {
    mutate {
      add_field => {
        "[user_agent][version]" => "%{[ua_tmp][major]}"
      }
    }
    if [ua_tmp][minor] {
      mutate {
        replace => {
          "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][minor]}"
        }
      }
      if [ua_tmp][patch] {
        mutate {
          replace => {
            "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][patch]}"
          }
        }
        if [ua_tmp][build] {
          mutate {
            replace => {
              "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][build]}"
            }
          }
        }
      }
    }
  }
  mutate {
    remove_field => ["ua_tmp"]
  }
}
